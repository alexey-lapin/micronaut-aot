/*
 * Copyright 2017-2021 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.aot.internal.sourcegen

import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec

class OptimizedEntryPointGeneratorTest extends AbstractSourceGeneratorSpec {
    private String entryPoint = 'io.micronaut.demo.Application'
    private List<SourceGenerator> generators = []

    @Override
    SourceGenerator newGenerator() {
        new OptimizedEntryPointGenerator(context, entryPoint, "Application\$Optimized", generators)
    }

    def "generates a simple entry point delegating to the user entry point"() {
        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass('Application$Optimized') {
                withSources '''package io.micronaut.test;

import io.micronaut.demo.Application;
import java.lang.String;

public class Application$Optimized {
  static {
  }

  public static void main(String[] args) {
    Application.main(args);
  }
}
'''
            }
        }
    }

    def "delegate source generators are used in static initializer"() {
        generators << new GeneratorWithStaticInit(context, "initializer1")
        generators << new GeneratorWithStaticInit(context, "initializer2")

        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass('Application$Optimized') {
                withSources '''package io.micronaut.test;

import io.micronaut.demo.Application;
import java.lang.String;

public class Application$Optimized {
  static {
    initializer1();
    initializer2();
  }

  public static void main(String[] args) {
    Application.main(args);
  }

  private static void initializer1() {
  }

  private static void initializer2() {
  }
}
'''
            }
        }
    }

    def "sources generated by delegates are generated"() {
        generators << new ClassGenerating(context)

        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass("SomeClass") {
                withSources """package io.micronaut.test;

class SomeClass {
}
"""
            }
            hasClass('Application$Optimized') {
                containingSources('class Application$Optimized')
            }
        }
    }

    private static class GeneratorWithStaticInit extends AbstractSourceGenerator {
        private final String name

        protected GeneratorWithStaticInit(SourceGenerationContext context, String name) {
            super(context)
            this.name = name
        }

        @Override
        Optional<MethodSpec> generateStaticInit() {
            staticMethod(name) {

            }
        }
    }

    private class ClassGenerating extends AbstractSingleClassFileGenerator {

        protected ClassGenerating(SourceGenerationContext context) {
            super(context)
        }

        @Override
        protected JavaFile generate() {
            JavaFile.builder(packageName, TypeSpec.classBuilder("SomeClass").build())
                    .build()
        }
    }
}
